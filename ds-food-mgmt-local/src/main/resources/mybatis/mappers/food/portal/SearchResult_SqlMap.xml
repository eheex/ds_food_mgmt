<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.food.portal.mapper.SearchResultMapper">

	<resultMap type="FudList" id="FudListResult">
		<result property="fudId" column="FUD_ID"/>
		<result property="fudNm" column="FUD_NM"/>
		<result property="fudStnCd" column="FUD_STN_CD"/>
		<result property="fudOrgplceCd" column="FUD_ORGPLCE_CD"/>
		<result property="prductStnCd" column="PRDUCT_STN_CD"/>
		<result property="fudUrl" column="FUD_URL"/>
		<result property="spcIgd" column="SPC_IGD"/>
		<result property="tag" column="TAG"/>
		<result property="brand" column="BRAND"/>
		<result property="vlm" column="VLM"/>
		<result property="cal" column="CAL"/>
		<result property="rawmtrlRuleStrct" column="RAWMTRL_RULE_STRCT"/>
		<result property="cpnNm" column="CPN_NM"/>
		<result property="totcnt" column="TOTCNT"/>
		<result property="allrgyIgdCt" column="ALLRGY_IGD_CT"/>
		<result property="allrgyGbn" column="ALLRGY_GBN"/>
		<result property="cert" column="CERT"/>
		<result property="notAdd" column="NOT_ADD"/>
		<result property="ntrIgdNm" column="NTR_IGD_NM"/>
		<result property="hiscnt" column="HISCNT"/>
		<result property="crtDt" column="CRT_DT"/>
		<result property="sortHiscnt" column="SORT_HISCNT"/>
		<result property="sortCal" column="SORT_CAL"/>
		<result property="clsGroup" column="CLS_GROUP"/>
	</resultMap>

    <!-- 식품명 조회 -->
    <select id="selectSearchResultList" resultMap="FudListResult">
    	<![CDATA[
	        SELECT A.FUD_ID,A.FUD_NM,A.FUD_STN_CD,A.FUD_ORGPLCE_CD		/* 식품아이디,식품이름,식품구분코드,식품원산지코드 */
			,	   A.PRDUCT_STN_CD,A.FUD_URL,A.SPC_IGD,A.TAG,A.BRAND	/* 제품구분코드,식품정보URL,식품번들출력코드,브랜드 */
			,	   A.VLM												/* 중량 */
			,	   B.CAL 												/* 칼로리 */
			,	   C.RAWMTRL_RULE_STRCT									/* 주재료 */ 
			,	   E.CPN_NM												/* 판매처 */
			,	   D.TOTCNT												/* 총카운트 */
			,	   A.ALLRGY_IGD_CT,A.ALLRGY_GBN							/* 알레르기성분,알레르기성분 유무(Y:있음,N:없음) */
			,	  (SELECT GROUP_CONCAT(cc.CD_NM SEPARATOR ',') FROM FUD_MTA fm,CM_CD cc 
				   WHERE fm.MTA_ATRB = cc.CD_ID AND fm.MTA_ID = 110 AND fm.FUD_ID=A.FUD_ID 
				   GROUP BY A.FUD_ID) AS CERT							/* 인증 */
			,	  (SELECT GROUP_CONCAT(cc.CD_NM SEPARATOR ',') FROM FUD_MTA fm,CM_CD cc WHERE fm.MTA_ID = 111 
				   AND fm.FUD_ID= A.FUD_ID
				   AND fm.MTA_ATRB = cc.CD_ID
				   GROUP BY A.FUD_ID) AS NOT_ADD						/* 무첨가 */
			,	  (SELECT GROUP_CONCAT(BB.NTR_IGD_NM SEPARATOR ',') 
				     FROM FUD_NTR_IGD_CNAMT AA ,NTR_IGD BB 
				   WHERE AA.RATE > 50 AND   AA.OPP_NTR_IGD_ID = BB.NTR_IGD_ID
				   AND AA.FUD_ID = A.FUD_ID 
				   GROUP BY A.FUD_ID) NTR_IGD_NM 						/* 영양성분주의 */
			,	   F.HISCNT AS HISCNT       							/* 인기순카운트 */
			,      CASE WHEN LENGTH(IFNULL(F.HISCNT,DATE_FORMAT(A.CRT_DT,'%Y%m%d'))) <> 8 THEN 90000000 + F.HISCNT 
			            ELSE DATE_FORMAT(A.CRT_DT,'%Y%m%d') END  SORT_HISCNT						/* 정렬 인기순카운트 */
			,      CASE WHEN LENGTH(IFNULL(B.CAL,DATE_FORMAT(A.CRT_DT,'%Y%m%d'))) <> 8 THEN 90000000 + B.CAL
			            ELSE DATE_FORMAT(A.CRT_DT,'%Y%m%d') END  SORT_CAL							/* 정렬 칼로리 */
			            
			,	   A.CRT_DT												/* 제품등록일  */
			FROM
			(
				SELECT FUD_ID,FUD_NM,FUD_STN_CD,FUD_ORGPLCE_CD	
				,      PRDUCT_STN_CD,FUD_URL,SPC_IGD,TAG,BRAND	
				,      ALLRGY_IGD_CT,CASE WHEN 	ALLRGY_IGD_CT IS NOT NULL THEN 'Y' ELSE 'N' END ALLRGY_GBN		
				,      LOWER(CONCAT(VLM,VLM_UNT_CD)) VLM,CRT_DT
				FROM FUD
			) A LEFT JOIN FUD_NTR_IGD_SER B ON A.FUD_ID = B.FUD_ID 
						       AND B.UNT_CNTN_TYP_CD = 'TOT'
				/*  주재료 : 여려개의 주재료가 있을경우에는 처음한개만가져온다. */
			    LEFT JOIN (SELECT A.FUD_ID,B.RAWMTRL_RULE_STRCT
					FROM
					(
						SELECT  MAX(BAS_RAWMTRL_ID) BAS_RAWMTRL_ID ,FUD_ID
						FROM    FUD_RAWMTRL
						WHERE   RAWMTRL_SRT_NO = '0'
						#AND    FUD_ID = '10000030'
						AND    ( RAWMTRL_RULE_STRCT IS NOT NULL AND length(RAWMTRL_RULE_STRCT)  <> 0)
						GROUP BY FUD_ID
					) A LEFT JOIN FUD_RAWMTRL B ON A.BAS_RAWMTRL_ID = B.BAS_RAWMTRL_ID
								   AND A.FUD_ID = B.FUD_ID
								   AND B.RAWMTRL_SRT_NO = '0') C ON A.FUD_ID = C.FUD_ID 
			    LEFT JOIN (SELECT  COUNT(*) TOTCNT FROM  FUD
					WHERE FUD_NM LIKE '%' #{query.fudNm} '%') D ON D.TOTCNT LIKE '%%'
			    	/* 판매점 표시순서
			       1.CPN_CTG_DIS 유통전문판매원,2.CPN_CTG_SLM 판매원,3.CPN_CTG_EXP	수입판매원
			       4.CPN_CTG_SEP 소분/판매원,5.CPN_CTG_EXP_1수입원,6CPN_CTG_MAF 제조원,7CPN_CTG_SUB 소분원 */
			    LEFT JOIN (SELECT A.FUD_ID,MAX(A.CPN_ID) CPN_ID								
					,	   (SELECT CPN_NM FROM CPN WHERE CPN_ID = A.CPN_ID) CPN_NM
					FROM
					(
						SELECT A.FUD_ID,A.CPN_ID,MIN(SORT) SORT
							FROM
							(
								SELECT FUD_ID,CPN_CTG_CD,CPN_ID 
							,	   CASE WHEN CPN_CTG_CD = 'CPN_CTG_DIS' THEN '1' 
										WHEN CPN_CTG_CD = 'CPN_CTG_SLM' THEN '2'
										WHEN CPN_CTG_CD = 'CPN_CTG_EXP' THEN '3'
										WHEN CPN_CTG_CD = 'CPN_CTG_SEP' THEN '4'
										WHEN CPN_CTG_CD = 'CPN_CTG_EXP_1' THEN '5'
										WHEN CPN_CTG_CD = 'CPN_CTG_MAF' THEN '6'
										ELSE '7' END SORT 
								FROM FUD_CPN 
							) A
							GROUP BY A.FUD_ID,A.CPN_ID
					) A 
					GROUP BY A.FUD_ID) E ON A.FUD_ID = E.FUD_ID
			    LEFT JOIN (SELECT PRD_CD, COUNT(*) HISCNT  FROM FOOD_PROD_HIS
			               GROUP BY PRD_CD) F ON A.FUD_ID = F.PRD_CD        
			         
			WHERE A.FUD_NM LIKE '%' #{query.fudNm} '%'
		]]>
    </select>
    
    <!-- 카테고리 조회 -->
    <select id="selectSearchCategoryResultList" resultMap="FudListResult">
	    <![CDATA[
		    SELECT B.FUD_ID,B.FUD_NM,B.FUD_STN_CD,B.FUD_ORGPLCE_CD 		/*식품아이디,식품이름,식품구분코드,식품원산지코드*/
			,	   B.PRDUCT_STN_CD,B.FUD_URL,B.SPC_IGD,B.TAG,B.BRAND	/*제품구분코드,식품정보URL,식품번들출력코드,브랜드*/
			,	   B.ALLRGY_IGD_CT,B.ALLRGY_GBN							/* 알레르기성분,알레르기성분 유무(Y:있음,N:없음) */
			,	   B.VLM ,B.CAL 										/* 중량 ,칼로리*/
			,	   B.RAWMTRL_RULE_STRCT									/*주재료 */
			,	   E.CPN_NM												/*판매처 */
			,	   A.TOTCNT 											/*조회 카테고리 총 카운트수*/
			,	  (SELECT GROUP_CONCAT(cc.CD_NM SEPARATOR ',') FROM FUD_MTA fm,CM_CD cc 
				   WHERE fm.MTA_ATRB = cc.CD_ID AND fm.MTA_ID = 110 AND fm.FUD_ID=A.FUD_ID 
				   GROUP BY A.FUD_ID) AS CERT							/* 인증 */
			,	  (SELECT GROUP_CONCAT(cc.CD_NM SEPARATOR ',') FROM FUD_MTA fm,CM_CD cc WHERE fm.MTA_ID = 111 
				   AND fm.FUD_ID= A.FUD_ID
				   AND fm.MTA_ATRB = cc.CD_ID
				   GROUP BY A.FUD_ID) AS NOT_ADD						/* 무첨가 */
			,	  (SELECT GROUP_CONCAT(BB.NTR_IGD_NM SEPARATOR ',') 
				   from FUD_NTR_IGD_CNAMT AA ,NTR_IGD BB 
				   WHERE AA.RATE > 50 AND   AA.OPP_NTR_IGD_ID = BB.NTR_IGD_ID
				   AND AA.FUD_ID = A.FUD_ID 
				   GROUP BY A.FUD_ID) NTR_IGD_NM 						/* 영양성분주의 */
			,	  B.CRT_DT												/* 제품등록일  */
			,     F.HISCNT 												/* 인기순카운트 */
			,	  CASE WHEN LENGTH(IFNULL(F.HISCNT,DATE_FORMAT(B.CRT_DT,'%Y%m%d'))) <> 8 THEN 90000000 + F.HISCNT 
					   ELSE DATE_FORMAT(B.CRT_DT,'%Y%m%d') END  SORT_HISCNT		/* 정렬 인기순카운트 */
			,	  CASE WHEN LENGTH(IFNULL(B.CAL,DATE_FORMAT(B.CRT_DT,'%Y%m%d'))) <> 8 THEN 90000000 + B.CAL
					   ELSE DATE_FORMAT(B.CRT_DT,'%Y%m%d') END  SORT_CAL		/* 정렬 칼로리 */
		FROM
		(
			SELECT A.FUD_ID,B.TOTCNT
			FROM
			(
				SELECT A.CLS_ID,A.CLS_NM
				,	   A.OPP_CLS_ID,A.BAS_CLS_ID
				,      A.OPP_CLS_SRT_NO,A.BAS_CLS_SRT_NO
				,      A.OPP_CLS_LVL_NO,A.BAS_CLS_LVL_NO 
				,	   B.FUD_ID
				FROM 
				(
					SELECT  A.CLS_ID,A.CLS_NM,B.OPP_CLS_ID
					,		B.BAS_CLS_ID,B.OPP_CLS_SRT_NO
					,		B.BAS_CLS_SRT_NO,B.OPP_CLS_LVL_NO
					,		B.BAS_CLS_LVL_NO
					FROM CLS A,CLS_RLT B
					 WHERE A.DLT_YN = 'N' AND A.CLS_ID = B.OPP_CLS_ID
					 AND   A.CLS_TYP_CD = 'CLS'
				) A , FUD_CLS_RLT B 
				WHERE A.CLS_ID = B.CLS_ID
				AND   TRIM(A.CLS_NM) = #{query.categoryNm}
			) A LEFT JOIN (SELECT COUNT(*) TOTCNT	
							FROM 
							(
								SELECT  A.CLS_ID,A.CLS_NM,B.OPP_CLS_ID
								,		B.BAS_CLS_ID,B.OPP_CLS_SRT_NO
								,		B.BAS_CLS_SRT_NO,B.OPP_CLS_LVL_NO
								,		B.BAS_CLS_LVL_NO
								FROM CLS A,CLS_RLT B
								 WHERE A.DLT_YN = 'N' AND A.CLS_ID = B.OPP_CLS_ID
								 AND   A.CLS_TYP_CD = 'CLS'
							) A , FUD_CLS_RLT B 
							WHERE A.CLS_ID = B.CLS_ID
							AND   TRIM(A.CLS_NM) = #{query.categoryNm}) B ON A.FUD_ID LIKE '%%'
		) A LEFT JOIN (SELECT A.FUD_ID,A.FUD_NM,A.FUD_STN_CD,A.FUD_ORGPLCE_CD 
					,	   A.PRDUCT_STN_CD,A.FUD_URL,A.SPC_IGD,A.TAG,A.BRAND
					,	   A.ALLRGY_IGD_CT,A.ALLRGY_GBN
					,	   A.VLM,A.CRT_DT
					,	   B.CAL 					
					,	   C.RAWMTRL_RULE_STRCT		
					
					FROM
					(
						SELECT FUD_ID,FUD_NM,FUD_STN_CD,FUD_ORGPLCE_CD	
						,	   PRDUCT_STN_CD,FUD_URL,SPC_IGD,TAG,BRAND	
						,	   ALLRGY_IGD_CT,CASE WHEN 	ALLRGY_IGD_CT IS NOT NULL THEN 'N' ELSE 'Y' END ALLRGY_GBN		
						,	   CONCAT(VLM,VLM_UNT_CD) VLM,CRT_DT
						FROM FUD
					) A LEFT JOIN FUD_NTR_IGD_SER B ON A.FUD_ID = B.FUD_ID 
								       AND B.UNT_CNTN_TYP_CD = 'TOT'
					    /*  주재료 : 여려개의 주재료가 있을경우에는 처음한개만가져온다. */
					    LEFT JOIN (SELECT A.FUD_ID,B.RAWMTRL_RULE_STRCT
							FROM
							(
								select  MAX(BAS_RAWMTRL_ID) BAS_RAWMTRL_ID ,FUD_ID
								from FUD_RAWMTRL
								where  RAWMTRL_SRT_NO = '0'
								AND    ( RAWMTRL_RULE_STRCT IS NOT NULL AND length(RAWMTRL_RULE_STRCT)  <> 0)
								GROUP BY FUD_ID
							) A LEFT JOIN FUD_RAWMTRL B ON A.BAS_RAWMTRL_ID = B.BAS_RAWMTRL_ID
										   AND A.FUD_ID = B.FUD_ID
										  AND  B.RAWMTRL_SRT_NO = '0') C ON A.FUD_ID = C.FUD_ID 
			      ) B ON A.FUD_ID = B.FUD_ID 
		       /* 판매점 표시순서
		       1.CPN_CTG_DIS 유통전문판매원,2.CPN_CTG_SLM 판매원,3.CPN_CTG_EXP	수입판매원
		       4.CPN_CTG_SEP 소분/판매원,5.CPN_CTG_EXP_1수입원,6CPN_CTG_MAF 제조원,7CPN_CTG_SUB 소분원 */
			LEFT JOIN (SELECT A.FUD_ID,MAX(A.CPN_ID) CPN_ID								
				,	   (SELECT CPN_NM FROM CPN WHERE CPN_ID = A.CPN_ID) CPN_NM
				FROM
				(
					SELECT A.FUD_ID,A.CPN_ID,MIN(SORT) SORT
						FROM
						(
							SELECT FUD_ID,CPN_CTG_CD,CPN_ID 
						,	   CASE WHEN CPN_CTG_CD = 'CPN_CTG_DIS' THEN '1' 
									WHEN CPN_CTG_CD = 'CPN_CTG_SLM' THEN '2'
									WHEN CPN_CTG_CD = 'CPN_CTG_EXP' THEN '3'
									WHEN CPN_CTG_CD = 'CPN_CTG_SEP' THEN '4'
									WHEN CPN_CTG_CD = 'CPN_CTG_EXP_1' THEN '5'
									WHEN CPN_CTG_CD = 'CPN_CTG_MAF' THEN '6'
									ELSE '7' END SORT 
							FROM FUD_CPN 
						) A
						GROUP BY A.FUD_ID,A.CPN_ID
				) A 
				GROUP BY A.FUD_ID) E ON A.FUD_ID = E.FUD_ID
		    LEFT JOIN (SELECT PRD_CD,COUNT(*) HISCNT FROM FOOD_PROD_HIS 
		               GROUP BY PRD_CD) F ON A.FUD_ID = F.PRD_CD         
	    ]]>
    </select>
    
    <!-- 태그명 조회 -->
    <select id="selectSearchTagResultList" resultMap="FudListResult">
    	<![CDATA[
    		SELECT A.FUD_ID,A.FUD_NM,A.FUD_STN_CD,A.FUD_ORGPLCE_CD		/* 식품아이디,식품이름,식품구분코드,식품원산지코드 */
			,	   A.PRDUCT_STN_CD,A.FUD_URL,A.SPC_IGD,A.TAG,A.BRAND	/* 제품구분코드,식품정보URL,식품번들출력코드,브랜드 */
			,	   A.VLM												/* 중량 */
			,	   B.CAL 												/* 칼로리 */
			,	   C.RAWMTRL_RULE_STRCT									/* 주재료 */ 
			,	   E.CPN_NM												/* 판매처 */
			,	   D.TOTCNT												/* 총카운트 */
			,	   A.ALLRGY_IGD_CT,A.ALLRGY_GBN							/* 알레르기성분,알레르기성분 유무(Y:있음,N:없음) */
			,	  (SELECT GROUP_CONCAT(cc.CD_NM SEPARATOR ',') FROM FUD_MTA fm,CM_CD cc 
				   WHERE fm.MTA_ATRB = cc.CD_ID AND fm.MTA_ID = 110 AND fm.FUD_ID=A.FUD_ID 
				   GROUP BY A.FUD_ID) AS CERT							/* 인증 */
			,	  (SELECT GROUP_CONCAT(cc.CD_NM SEPARATOR ',') FROM FUD_MTA fm,CM_CD cc WHERE fm.MTA_ID = 111 
				   AND fm.FUD_ID= A.FUD_ID
				   AND fm.MTA_ATRB = cc.CD_ID
				   GROUP BY A.FUD_ID) AS NOT_ADD						/* 무첨가 */
			,	  (SELECT GROUP_CONCAT(BB.NTR_IGD_NM SEPARATOR ',') 
					 FROM FUD_NTR_IGD_CNAMT AA ,NTR_IGD BB 
				   WHERE AA.RATE > 50 AND   AA.OPP_NTR_IGD_ID = BB.NTR_IGD_ID
				   AND AA.FUD_ID = A.FUD_ID 
				   GROUP BY A.FUD_ID) NTR_IGD_NM 						/* 영양성분주의 */
			,	   F.HISCNT AS HISCNT       							/* 인기순카운트 */
			,      CASE WHEN LENGTH(IFNULL(F.HISCNT,DATE_FORMAT(A.CRT_DT,'%Y%m%d'))) <> 8 THEN 90000000 + F.HISCNT 
						ELSE DATE_FORMAT(A.CRT_DT,'%Y%m%d') END  SORT_HISCNT						/* 정렬 인기순카운트 */
			,      CASE WHEN LENGTH(IFNULL(B.CAL,DATE_FORMAT(A.CRT_DT,'%Y%m%d'))) <> 8 THEN 90000000 + B.CAL
						ELSE DATE_FORMAT(A.CRT_DT,'%Y%m%d') END  SORT_CAL							/* 정렬 칼로리 */
			,	   A.CRT_DT												/* 제품등록일  */
			,	   A.ALI_NM												/*  식품이명 */
			FROM
			(
				SELECT A.FUD_ID,A.FUD_NM,A.FUD_STN_CD,A.FUD_ORGPLCE_CD	
				,      A.PRDUCT_STN_CD,A.FUD_URL,A.SPC_IGD,A.TAG,BRAND	
				,      A.ALLRGY_IGD_CT,CASE WHEN A.ALLRGY_IGD_CT IS NOT NULL THEN 'Y' ELSE 'N' END ALLRGY_GBN		
				,      LOWER(CONCAT(A.VLM,A.VLM_UNT_CD)) VLM,A.CRT_DT
				,	   B.ALI_NM
				FROM FUD A LEFT JOIN (SELECT FUD_ID,GROUP_CONCAT(FUD_ALI SEPARATOR ',') ALI_NM
										FROM FUD_ALI
										GROUP BY FUD_ID) B ON A.FUD_ID = B.FUD_ID
				WHERE ( A.FUD_NM LIKE '%' #{query.tag} '%' OR A.TAG LIKE '%' #{query.tag} '%' OR B.ALI_NM LIKE '%' #{query.tag} '%')
			) A LEFT JOIN FUD_NTR_IGD_SER B ON A.FUD_ID = B.FUD_ID 
							   AND B.UNT_CNTN_TYP_CD = 'TOT'
				/*  주재료 : 여려개의 주재료가 있을경우에는 처음한개만가져온다. */
				LEFT JOIN (SELECT A.FUD_ID,B.RAWMTRL_RULE_STRCT
					FROM
					(
						SELECT  MAX(BAS_RAWMTRL_ID) BAS_RAWMTRL_ID ,FUD_ID
						FROM    FUD_RAWMTRL
						WHERE   RAWMTRL_SRT_NO = '0'
						AND    ( RAWMTRL_RULE_STRCT IS NOT NULL AND length(RAWMTRL_RULE_STRCT)  <> 0)
						GROUP BY FUD_ID
					) A LEFT JOIN FUD_RAWMTRL B ON A.BAS_RAWMTRL_ID = B.BAS_RAWMTRL_ID
								   AND A.FUD_ID = B.FUD_ID
								   AND B.RAWMTRL_SRT_NO = '0') C ON A.FUD_ID = C.FUD_ID 
				LEFT JOIN (SELECT COUNT(*) TOTCNT
							FROM FUD A LEFT JOIN (SELECT FUD_ID,GROUP_CONCAT(FUD_ALI SEPARATOR ',') ALI_NM
													FROM FUD_ALI
													GROUP BY FUD_ID) B ON A.FUD_ID = B.FUD_ID
							WHERE ( A.FUD_NM LIKE '%' #{query.tag} '%' OR A.TAG LIKE '%' #{query.tag} '%' OR B.ALI_NM LIKE '%' #{query.tag} '%')) D ON D.TOTCNT LIKE '%%'
					/* 판매점 표시순서
				   1.CPN_CTG_DIS 유통전문판매원,2.CPN_CTG_SLM 판매원,3.CPN_CTG_EXP	수입판매원
				   4.CPN_CTG_SEP 소분/판매원,5.CPN_CTG_EXP_1수입원,6CPN_CTG_MAF 제조원,7CPN_CTG_SUB 소분원 */
				LEFT JOIN (SELECT A.FUD_ID,MAX(A.CPN_ID) CPN_ID								
					,	   (SELECT CPN_NM FROM CPN WHERE CPN_ID = A.CPN_ID) CPN_NM
					FROM
					(
						SELECT A.FUD_ID,A.CPN_ID,MIN(SORT) SORT
							FROM
							(
								SELECT FUD_ID,CPN_CTG_CD,CPN_ID 
							,	   CASE WHEN CPN_CTG_CD = 'CPN_CTG_DIS' THEN '1' 
										WHEN CPN_CTG_CD = 'CPN_CTG_SLM' THEN '2'
										WHEN CPN_CTG_CD = 'CPN_CTG_EXP' THEN '3'
										WHEN CPN_CTG_CD = 'CPN_CTG_SEP' THEN '4'
										WHEN CPN_CTG_CD = 'CPN_CTG_EXP_1' THEN '5'
										WHEN CPN_CTG_CD = 'CPN_CTG_MAF' THEN '6'
										ELSE '7' END SORT 
								FROM FUD_CPN 
							) A
							GROUP BY A.FUD_ID,A.CPN_ID
					) A 
					GROUP BY A.FUD_ID) E ON A.FUD_ID = E.FUD_ID
				LEFT JOIN (SELECT PRD_CD, COUNT(*) HISCNT  FROM FOOD_PROD_HIS
						   GROUP BY PRD_CD) F ON A.FUD_ID = F.PRD_CD
    	]]>
    </select>
    
    <!-- 카테고리 위치 검색 -->
    <select id="selectCategoryLocationSearch" resultMap="FudListResult">
	    SELECT  A.CLS_ID,A.CLS_NM,B.OPP_CLS_ID
		,		B.BAS_CLS_ID,B.OPP_CLS_SRT_NO
		,		B.OPP_CLS_LVL_NO
		,	    CASE WHEN  B.OPP_CLS_LVL_NO = '1' THEN A.CLS_NM /* */
		             WHEN  B.OPP_CLS_LVL_NO = '2' THEN CONCAT( (SELECT CLS_NM FROM CLS WHERE CLS_ID = B.BAS_CLS_ID ),'>',A.CLS_NM)  
		             ELSE  CONCAT((SELECT CLS_NM FROM CLS BB
								   WHERE BB.CLS_ID = ( SELECT AA.BAS_CLS_ID FROM CLS_RLT AA 
													  WHERE AA.OPP_CLS_ID = B.BAS_CLS_ID)),'>',
		                          (SELECT AA.CLS_NM FROM CLS AA WHERE AA.CLS_ID = B.BAS_CLS_ID),'>', 
								  A.CLS_NM ) 
		             END CLS_GROUP
		FROM CLS A,CLS_RLT B
		 WHERE A.CLS_ID = #{query.clsId}
		 AND   A.DLT_YN = 'N' AND A.CLS_ID = B.OPP_CLS_ID
		 AND   A.CLS_TYP_CD = 'CLS'
    </select>
    
    <insert id="insertFoodProdHis" parameterType="FudList">
		<![CDATA[
		INSERT INTO FOOD_PROD_HIS (
				PRD_SEQ,
				CLS_ID,
				PRD_CD,
				PRD_NM,
				MOD_DT
								  )
		VALUES (
				(SELECT LPAD(IFNULL(MAX(A.PRD_SEQ),0) + 1,'11','0') FROM FOOD_PROD_HIS A),
				'1',
				#{query.fudId},
				#{query.fudNm},
				NOW()
			   )
		]]>
    </insert>
</mapper>
